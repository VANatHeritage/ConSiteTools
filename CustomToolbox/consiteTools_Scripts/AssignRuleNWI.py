# -------------------------------------------------------------------------------------------------------
# AssignRuleNWI.py
# Version:  ArcGIS 10.3.1 / Python 2.7.8
# Creation Date: 2015-03-25
# Last Edit: 2016-01-26
# Creator:  Kirsten R. Hazler
#
# Summary:  Assigns Site Building Blocks (SBB) rules to National Wetland Inventory (NWI) polygons.  
# SBB rules 5, 6, 7, and 9 are included in this process.  This script creates a binary column for each rule.
# If the rule applies to a record, the value in the corresponding column is set to 1, otherwise the value is
# 0.  Each record can have one or more rules assigned, or no rules at all.
#
# Usage:  The table input to this tool should have been first generated by the "Tabulate NWI Codes" tool,
# followed by the "Parse NWI Codes" tool.
# 
# For this tool to function correctly, the input table must have certain fields generated by the previous.
# 
# Field names used are hard-coded in this script.  Unless otherwise noted as coming from the original NWI data,
# these fields were created and populated by parsing the original NWI codes into meaningful units.  Key fields 
# in the input table are:
#     ATTRIBUTE - contains the original NWI code
#     WETLAND_TYPE - contains a general description of the type; included in original NWI data
#     Syst - contains the System name, tier 1 in the NWI hierarchy
#     Subsyst - contains the Subsystem name, tier 2 in the NWI hierarchy
#     Cls1 - contains the primary (in some cases the only) Class name, tier 3 in the NWI hierarchy
#     Subcls1 - contains the primary (in some cases the ony) Subclass name, tier 4 in the NWI hierarchy
#     Cls2 - contains the secondary Class name for mixed NWI types
#     Subcls2 - contains the secondary Subclass name for mixed NWI types
#     Tidal - contains the tidal status portion of the water regime
#     WtrReg - contains the flood frequency portion of the water regime
#     Mods - contains any additional type modifiers
#     Exclude - contains the value 'X' to flag features to be excluded from rule assignment
# -------------------------------------------------------------------------------------------------------
#
# Import required modules
import arcpy # provides access to all ArcGIS geoprocessing functions
import os # provides access to operating system funtionality such as file and directory paths
import traceback # used for error handling

# Arguments to be input by user...
Input_NWI = arcpy.GetParameterAsText(0) # Input NWI code table  

# Create new fields to hold SBB rules, and set initial values to 0
arcpy.AddMessage('Adding and initializing SBB rule fields...')
RuleList = ['Rule5', 'Rule6', 'Rule7', 'Rule9']
for Rule in RuleList:
   arcpy.AddField_management (Input_NWI, Rule, 'SHORT')
   arcpy.CalculateField_management (Input_NWI, Rule, 0, "PYTHON")

# Set up a full list of the relevant fields   
flds = ['ATTRIBUTE', 'WETLAND_TYPE', 'Syst', 'Subsyst', 'Cls1', 'Subcls1', 
        'Cls2', 'Subcls2', 'Tidal', 'WtrReg', 'Exclude',
        'Rule5', 'Rule6', 'Rule7', 'Rule9']

# Loop through the records and assign SBB rules
arcpy.AddMessage('Examining NWI codes and assigning SBB rules...')

with arcpy.da.UpdateCursor(Input_NWI, flds) as cursor:
   for row in cursor:
      # Get the values from relevant fields
      nwiCode = row[0]
      wetType = row[1]
      syst = row[2]
      subsyst = row[3]
      cls1 = row[4]
      subcls1 = row[5]
      cls2 = row[6]
      subcls2 = row[7]
      tidal = row[8]
      wtrReg = row[9]
      exclude = row[10]
      
      # Update the values of SBB rule fields based on various criteria
      if exclude == 'X':
         continue # Skip all the rest and go on to process the next record
      if tidal in ('Saltwater Tidal', 'Freshwater Tidal'):
         if syst == 'Marine' or syst == None:
            pass # No rule assigned
         else:
            if (cls1 in ('Emergent', 'Scrub-Shrub', 'Forested') or
                cls2 in ('Emergent', 'Scrub-Shrub', 'Forested') or
                cls1 == 'Aquatic Bed' and subcls1 == None or
                cls2 == 'Aquatic Bed' and subcls2 == None or
                subcls1 in ('Rooted Vascular', 'Floating Vascular', 'Vegetated') or
                subcls2 in ('Rooted Vascular', 'Floating Vascular', 'Vegetated')):
               row[14] = 1 # Assign Rule 9
            else:
               pass # No rule assigned
      elif tidal == 'Nontidal':
         if syst == 'Lacustrine':
            row[12] = 1 # Assign Rule 6
            row[13] = 1 # Assign Rule 7
         elif syst == 'Palustrine':
            if (cls1 in ('Emergent', 'Scrub-Shrub', 'Forested') or
                cls2 in ('Emergent', 'Scrub-Shrub', 'Forested')): 
               if (cls1 == 'Emergent' or cls2 == 'Emergent'):
                  row[11] = 1 # Assign Rule 5
                  row[12] = 1 # Assign Rule 6
                  row[13] = 1 # Assign Rule 7
               else:
                  row[11] = 1 # Assign Rule 5
            else:
               row[12] = 1 # Assign Rule 6
               row[13] = 1 # Assign Rule 7
         else:
            pass # No rule assigned
      else:
         pass # No rule assigned
      
      cursor.updateRow(row)








